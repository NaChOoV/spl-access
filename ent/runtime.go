// Code generated by ent, DO NOT EDIT.

package ent

import (
	"spl-access/ent/access"
	"spl-access/ent/schema"
	"spl-access/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accessFields := schema.Access{}.Fields()
	_ = accessFields
	// accessDescCreatedAt is the schema descriptor for created_at field.
	accessDescCreatedAt := accessFields[4].Descriptor()
	// access.DefaultCreatedAt holds the default value on creation for the created_at field.
	access.DefaultCreatedAt = accessDescCreatedAt.Default.(func() time.Time)
	// accessDescUpdatedAt is the schema descriptor for updated_at field.
	accessDescUpdatedAt := accessFields[5].Descriptor()
	// access.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	access.DefaultUpdatedAt = accessDescUpdatedAt.Default.(func() time.Time)
	// access.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	access.UpdateDefaultUpdatedAt = accessDescUpdatedAt.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[3].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[4].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
}
