// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"spl-access/ent/access"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessCreate is the builder for creating a Access entity.
type AccessCreate struct {
	config
	mutation *AccessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRun sets the "run" field.
func (_c *AccessCreate) SetRun(v string) *AccessCreate {
	_c.mutation.SetRun(v)
	return _c
}

// SetLocation sets the "location" field.
func (_c *AccessCreate) SetLocation(v access.Location) *AccessCreate {
	_c.mutation.SetLocation(v)
	return _c
}

// SetEntryAt sets the "entry_at" field.
func (_c *AccessCreate) SetEntryAt(v time.Time) *AccessCreate {
	_c.mutation.SetEntryAt(v)
	return _c
}

// SetExitAt sets the "exit_at" field.
func (_c *AccessCreate) SetExitAt(v time.Time) *AccessCreate {
	_c.mutation.SetExitAt(v)
	return _c
}

// SetNillableExitAt sets the "exit_at" field if the given value is not nil.
func (_c *AccessCreate) SetNillableExitAt(v *time.Time) *AccessCreate {
	if v != nil {
		_c.SetExitAt(*v)
	}
	return _c
}

// Mutation returns the AccessMutation object of the builder.
func (_c *AccessCreate) Mutation() *AccessMutation {
	return _c.mutation
}

// Save creates the Access in the database.
func (_c *AccessCreate) Save(ctx context.Context) (*Access, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AccessCreate) SaveX(ctx context.Context) *Access {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AccessCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AccessCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AccessCreate) check() error {
	if _, ok := _c.mutation.Run(); !ok {
		return &ValidationError{Name: "run", err: errors.New(`ent: missing required field "Access.run"`)}
	}
	if _, ok := _c.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Access.location"`)}
	}
	if v, ok := _c.mutation.Location(); ok {
		if err := access.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Access.location": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EntryAt(); !ok {
		return &ValidationError{Name: "entry_at", err: errors.New(`ent: missing required field "Access.entry_at"`)}
	}
	return nil
}

func (_c *AccessCreate) sqlSave(ctx context.Context) (*Access, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AccessCreate) createSpec() (*Access, *sqlgraph.CreateSpec) {
	var (
		_node = &Access{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(access.Table, sqlgraph.NewFieldSpec(access.FieldID, field.TypeInt))
	)
	_spec.OnConflict = _c.conflict
	if value, ok := _c.mutation.Run(); ok {
		_spec.SetField(access.FieldRun, field.TypeString, value)
		_node.Run = value
	}
	if value, ok := _c.mutation.Location(); ok {
		_spec.SetField(access.FieldLocation, field.TypeEnum, value)
		_node.Location = value
	}
	if value, ok := _c.mutation.EntryAt(); ok {
		_spec.SetField(access.FieldEntryAt, field.TypeTime, value)
		_node.EntryAt = value
	}
	if value, ok := _c.mutation.ExitAt(); ok {
		_spec.SetField(access.FieldExitAt, field.TypeTime, value)
		_node.ExitAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Access.Create().
//		SetRun(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (_c *AccessCreate) OnConflict(opts ...sql.ConflictOption) *AccessUpsertOne {
	_c.conflict = opts
	return &AccessUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Access.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AccessCreate) OnConflictColumns(columns ...string) *AccessUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AccessUpsertOne{
		create: _c,
	}
}

type (
	// AccessUpsertOne is the builder for "upsert"-ing
	//  one Access node.
	AccessUpsertOne struct {
		create *AccessCreate
	}

	// AccessUpsert is the "OnConflict" setter.
	AccessUpsert struct {
		*sql.UpdateSet
	}
)

// SetRun sets the "run" field.
func (u *AccessUpsert) SetRun(v string) *AccessUpsert {
	u.Set(access.FieldRun, v)
	return u
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *AccessUpsert) UpdateRun() *AccessUpsert {
	u.SetExcluded(access.FieldRun)
	return u
}

// SetLocation sets the "location" field.
func (u *AccessUpsert) SetLocation(v access.Location) *AccessUpsert {
	u.Set(access.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccessUpsert) UpdateLocation() *AccessUpsert {
	u.SetExcluded(access.FieldLocation)
	return u
}

// SetEntryAt sets the "entry_at" field.
func (u *AccessUpsert) SetEntryAt(v time.Time) *AccessUpsert {
	u.Set(access.FieldEntryAt, v)
	return u
}

// UpdateEntryAt sets the "entry_at" field to the value that was provided on create.
func (u *AccessUpsert) UpdateEntryAt() *AccessUpsert {
	u.SetExcluded(access.FieldEntryAt)
	return u
}

// SetExitAt sets the "exit_at" field.
func (u *AccessUpsert) SetExitAt(v time.Time) *AccessUpsert {
	u.Set(access.FieldExitAt, v)
	return u
}

// UpdateExitAt sets the "exit_at" field to the value that was provided on create.
func (u *AccessUpsert) UpdateExitAt() *AccessUpsert {
	u.SetExcluded(access.FieldExitAt)
	return u
}

// ClearExitAt clears the value of the "exit_at" field.
func (u *AccessUpsert) ClearExitAt() *AccessUpsert {
	u.SetNull(access.FieldExitAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Access.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccessUpsertOne) UpdateNewValues() *AccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Access.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccessUpsertOne) Ignore() *AccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessUpsertOne) DoNothing() *AccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessCreate.OnConflict
// documentation for more info.
func (u *AccessUpsertOne) Update(set func(*AccessUpsert)) *AccessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *AccessUpsertOne) SetRun(v string) *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.SetRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *AccessUpsertOne) UpdateRun() *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateRun()
	})
}

// SetLocation sets the "location" field.
func (u *AccessUpsertOne) SetLocation(v access.Location) *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccessUpsertOne) UpdateLocation() *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateLocation()
	})
}

// SetEntryAt sets the "entry_at" field.
func (u *AccessUpsertOne) SetEntryAt(v time.Time) *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.SetEntryAt(v)
	})
}

// UpdateEntryAt sets the "entry_at" field to the value that was provided on create.
func (u *AccessUpsertOne) UpdateEntryAt() *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateEntryAt()
	})
}

// SetExitAt sets the "exit_at" field.
func (u *AccessUpsertOne) SetExitAt(v time.Time) *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.SetExitAt(v)
	})
}

// UpdateExitAt sets the "exit_at" field to the value that was provided on create.
func (u *AccessUpsertOne) UpdateExitAt() *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateExitAt()
	})
}

// ClearExitAt clears the value of the "exit_at" field.
func (u *AccessUpsertOne) ClearExitAt() *AccessUpsertOne {
	return u.Update(func(s *AccessUpsert) {
		s.ClearExitAt()
	})
}

// Exec executes the query.
func (u *AccessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccessUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccessUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccessCreateBulk is the builder for creating many Access entities in bulk.
type AccessCreateBulk struct {
	config
	err      error
	builders []*AccessCreate
	conflict []sql.ConflictOption
}

// Save creates the Access entities in the database.
func (_c *AccessCreateBulk) Save(ctx context.Context) ([]*Access, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Access, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AccessCreateBulk) SaveX(ctx context.Context) []*Access {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AccessCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AccessCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Access.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccessUpsert) {
//			SetRun(v+v).
//		}).
//		Exec(ctx)
func (_c *AccessCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccessUpsertBulk {
	_c.conflict = opts
	return &AccessUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Access.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AccessCreateBulk) OnConflictColumns(columns ...string) *AccessUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AccessUpsertBulk{
		create: _c,
	}
}

// AccessUpsertBulk is the builder for "upsert"-ing
// a bulk of Access nodes.
type AccessUpsertBulk struct {
	create *AccessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Access.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AccessUpsertBulk) UpdateNewValues() *AccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Access.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccessUpsertBulk) Ignore() *AccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccessUpsertBulk) DoNothing() *AccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccessCreateBulk.OnConflict
// documentation for more info.
func (u *AccessUpsertBulk) Update(set func(*AccessUpsert)) *AccessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccessUpsert{UpdateSet: update})
	}))
	return u
}

// SetRun sets the "run" field.
func (u *AccessUpsertBulk) SetRun(v string) *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.SetRun(v)
	})
}

// UpdateRun sets the "run" field to the value that was provided on create.
func (u *AccessUpsertBulk) UpdateRun() *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateRun()
	})
}

// SetLocation sets the "location" field.
func (u *AccessUpsertBulk) SetLocation(v access.Location) *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *AccessUpsertBulk) UpdateLocation() *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateLocation()
	})
}

// SetEntryAt sets the "entry_at" field.
func (u *AccessUpsertBulk) SetEntryAt(v time.Time) *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.SetEntryAt(v)
	})
}

// UpdateEntryAt sets the "entry_at" field to the value that was provided on create.
func (u *AccessUpsertBulk) UpdateEntryAt() *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateEntryAt()
	})
}

// SetExitAt sets the "exit_at" field.
func (u *AccessUpsertBulk) SetExitAt(v time.Time) *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.SetExitAt(v)
	})
}

// UpdateExitAt sets the "exit_at" field to the value that was provided on create.
func (u *AccessUpsertBulk) UpdateExitAt() *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.UpdateExitAt()
	})
}

// ClearExitAt clears the value of the "exit_at" field.
func (u *AccessUpsertBulk) ClearExitAt() *AccessUpsertBulk {
	return u.Update(func(s *AccessUpsert) {
		s.ClearExitAt()
	})
}

// Exec executes the query.
func (u *AccessUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
