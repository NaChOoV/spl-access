// Code generated by ent, DO NOT EDIT.

package access

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the access type in the database.
	Label = "access"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRun holds the string denoting the run field in the database.
	FieldRun = "run"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldEntryAt holds the string denoting the entry_at field in the database.
	FieldEntryAt = "entry_at"
	// FieldExitAt holds the string denoting the exit_at field in the database.
	FieldExitAt = "exit_at"
	// Table holds the table name of the access in the database.
	Table = "access"
)

// Columns holds all SQL columns for access fields.
var Columns = []string{
	FieldID,
	FieldRun,
	FieldLocation,
	FieldEntryAt,
	FieldExitAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Location defines the type for the "location" enum field.
type Location string

// Location values.
const (
	Location102 Location = "102"
	Location104 Location = "104"
	Location105 Location = "105"
	Location106 Location = "106"
	Location107 Location = "107"
	Location108 Location = "108"
)

func (l Location) String() string {
	return string(l)
}

// LocationValidator is a validator for the "location" field enum values. It is called by the builders before save.
func LocationValidator(l Location) error {
	switch l {
	case Location102, Location104, Location105, Location106, Location107, Location108:
		return nil
	default:
		return fmt.Errorf("access: invalid enum value for location field: %q", l)
	}
}

// OrderOption defines the ordering options for the Access queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRun orders the results by the run field.
func ByRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRun, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByEntryAt orders the results by the entry_at field.
func ByEntryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryAt, opts...).ToFunc()
}

// ByExitAt orders the results by the exit_at field.
func ByExitAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExitAt, opts...).ToFunc()
}
