// Code generated by ent, DO NOT EDIT.

package access

import (
	"spl-access/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldID, id))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldExternalID, v))
}

// EntryAt applies equality check predicate on the "entry_at" field. It's identical to EntryAtEQ.
func EntryAt(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldEntryAt, v))
}

// ExitAt applies equality check predicate on the "exit_at" field. It's identical to ExitAtEQ.
func ExitAt(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldExitAt, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Access {
	return predicate.Access(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Access {
	return predicate.Access(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Access {
	return predicate.Access(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Access {
	return predicate.Access(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Access {
	return predicate.Access(sql.FieldContainsFold(FieldExternalID, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v Location) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v Location) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...Location) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...Location) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldLocation, vs...))
}

// EntryAtEQ applies the EQ predicate on the "entry_at" field.
func EntryAtEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldEntryAt, v))
}

// EntryAtNEQ applies the NEQ predicate on the "entry_at" field.
func EntryAtNEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldEntryAt, v))
}

// EntryAtIn applies the In predicate on the "entry_at" field.
func EntryAtIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldEntryAt, vs...))
}

// EntryAtNotIn applies the NotIn predicate on the "entry_at" field.
func EntryAtNotIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldEntryAt, vs...))
}

// EntryAtGT applies the GT predicate on the "entry_at" field.
func EntryAtGT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldEntryAt, v))
}

// EntryAtGTE applies the GTE predicate on the "entry_at" field.
func EntryAtGTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldEntryAt, v))
}

// EntryAtLT applies the LT predicate on the "entry_at" field.
func EntryAtLT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldEntryAt, v))
}

// EntryAtLTE applies the LTE predicate on the "entry_at" field.
func EntryAtLTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldEntryAt, v))
}

// ExitAtEQ applies the EQ predicate on the "exit_at" field.
func ExitAtEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldEQ(FieldExitAt, v))
}

// ExitAtNEQ applies the NEQ predicate on the "exit_at" field.
func ExitAtNEQ(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldNEQ(FieldExitAt, v))
}

// ExitAtIn applies the In predicate on the "exit_at" field.
func ExitAtIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldIn(FieldExitAt, vs...))
}

// ExitAtNotIn applies the NotIn predicate on the "exit_at" field.
func ExitAtNotIn(vs ...time.Time) predicate.Access {
	return predicate.Access(sql.FieldNotIn(FieldExitAt, vs...))
}

// ExitAtGT applies the GT predicate on the "exit_at" field.
func ExitAtGT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGT(FieldExitAt, v))
}

// ExitAtGTE applies the GTE predicate on the "exit_at" field.
func ExitAtGTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldGTE(FieldExitAt, v))
}

// ExitAtLT applies the LT predicate on the "exit_at" field.
func ExitAtLT(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLT(FieldExitAt, v))
}

// ExitAtLTE applies the LTE predicate on the "exit_at" field.
func ExitAtLTE(v time.Time) predicate.Access {
	return predicate.Access(sql.FieldLTE(FieldExitAt, v))
}

// ExitAtIsNil applies the IsNil predicate on the "exit_at" field.
func ExitAtIsNil() predicate.Access {
	return predicate.Access(sql.FieldIsNull(FieldExitAt))
}

// ExitAtNotNil applies the NotNil predicate on the "exit_at" field.
func ExitAtNotNil() predicate.Access {
	return predicate.Access(sql.FieldNotNull(FieldExitAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Access) predicate.Access {
	return predicate.Access(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Access) predicate.Access {
	return predicate.Access(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Access) predicate.Access {
	return predicate.Access(sql.NotPredicates(p))
}
